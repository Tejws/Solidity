\\npm install crypto-js
\\node -v  node filename.js
const SHA256 = require('crypto-js/sha256');

class Transaction {
    constructor(fromAdd, toAdd, amount) {
        this.fromAdd = fromAdd;
        this.toAdd = toAdd;
        this.amount = amount;
    }
}

class Block {
    constructor(timestamp, transactions, previousHash = '') {
        this.timestamp = timestamp;
        this.transactions = transactions;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
        this.nonce = 0;
    }

    calculateHash() {
        return SHA256(this.previousHash + this.timestamp + JSON.stringify(this.transactions) + this.nonce).toString();
    }

    mineBlock(difficulty) {
        while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")) {
            this.nonce++;
            this.hash = this.calculateHash();
        }
        console.log("Block mined: " + this.hash);
    }
}

class Blockchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 2;
        this.pendingTransc = [];
        this.miningReward = 50;
    }

    createGenesisBlock() {
        return new Block("01/01/2017", [], "0");
    }

    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }

    minePendingTransc(miningRewardAdd) {
        let block = new Block(Date.now(), this.pendingTransc);
        block.previousHash = this.getLatestBlock().hash;
        block.mineBlock(this.difficulty);
        console.log("Block successfully mined");
        this.chain.push(block);
        this.pendingTransc = [
            new Transaction(null, miningRewardAdd, this.miningReward)
        ];
    }

    createTransc(transc) {
        this.pendingTransc.push(transc);
    }

    getBalance(add) {
        let balance = 0;
        for (const block of this.chain) {
            for (const trans of block.transactions) {
                if (trans.fromAdd === add) {
                    balance -= trans.amount;
                }
                if (trans.toAdd === add) {
                    balance += trans.amount;
                }
            }
        }
        return balance;
    }

    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const curBlock = this.chain[i];
            const prevBlock = this.chain[i - 1];
            if (curBlock.hash !== curBlock.calculateHash()) {
                return false;
            }
            if (curBlock.previousHash !== prevBlock.hash) {
                return false;
            }
        }
        return true;
    }
}

let masterCoin = new Blockchain();
masterCoin.createTransc(new Transaction('Tejas', 'Mayuri', 500));
masterCoin.createTransc(new Transaction('Mayuri', 'Akshat', 600));
masterCoin.createTransc(new Transaction('Akshat', 'Tejas', 500));

console.log("\nStarting the mining...");
masterCoin.minePendingTransc('Tejas');
console.log('\nBalance of Tejas is', masterCoin.getBalance('Tejas'));

console.log("\nStarting the mining again...");
masterCoin.minePendingTransc('Tejas');

console.log('\nBalance of Tejas is', masterCoin.getBalance('Tejas'));
